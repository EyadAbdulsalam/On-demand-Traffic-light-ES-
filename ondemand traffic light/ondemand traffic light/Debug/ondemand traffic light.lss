
ondemand traffic light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000786  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000007fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000007fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000082c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000868  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000142c  00000000  00000000  000009a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000082a  00000000  00000000  00001dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b9d  00000000  00000000  000025f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d8  00000000  00000000  00003194  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004df  00000000  00000000  0000336c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000057c  00000000  00000000  0000384b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00003dc7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 b0 03 	jmp	0x760	; 0x760 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 ab 03 	call	0x756	; 0x756 <main>
  74:	0c 94 c1 03 	jmp	0x782	; 0x782 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <carGreen>:
void carGreen(void)
{
	/************************************************************************/
	/*                        CAR's Green-Light is ON                       */
	/************************************************************************/
	flag=0;
  7c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	LED_on(PORT_A,Green);
  80:	60 e0       	ldi	r22, 0x00	; 0
  82:	81 e4       	ldi	r24, 0x41	; 65
  84:	0e 94 31 02 	call	0x462	; 0x462 <LED_on>
	Blink=0;
  88:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <Blink>
	while (Blink<5)                                        //checks if button is pressed 5 times
  8c:	89 c0       	rjmp	.+274    	; 0x1a0 <carGreen+0x124>
	{
		Start_timer(delay/5);
  8e:	82 e4       	ldi	r24, 0x42	; 66
  90:	9f e0       	ldi	r25, 0x0F	; 15
  92:	0e 94 98 03 	call	0x730	; 0x730 <Start_timer>
		if (flag==1)
  96:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  9a:	81 30       	cpi	r24, 0x01	; 1
  9c:	09 f0       	breq	.+2      	; 0xa0 <carGreen+0x24>
  9e:	7b c0       	rjmp	.+246    	; 0x196 <carGreen+0x11a>
		{                                                   //Button is pressed      ""Pedestrian-Mode""
			LED_on(PORT_B,Red);                             //1.turn on pedestrians'  ""RED-Light""
  a0:	62 e0       	ldi	r22, 0x02	; 2
  a2:	82 e4       	ldi	r24, 0x42	; 66
  a4:	0e 94 31 02 	call	0x462	; 0x462 <LED_on>
			Start_timer(delay);                 //NOTE: can be set to reminder or to restart counting
  a8:	8b e4       	ldi	r24, 0x4B	; 75
  aa:	9c e4       	ldi	r25, 0x4C	; 76
  ac:	0e 94 98 03 	call	0x730	; 0x730 <Start_timer>
			LED_off(PORT_A,Green);
  b0:	60 e0       	ldi	r22, 0x00	; 0
  b2:	81 e4       	ldi	r24, 0x41	; 65
  b4:	0e 94 35 02 	call	0x46a	; 0x46a <LED_off>
			LED_off(PORT_B,Red);
  b8:	62 e0       	ldi	r22, 0x02	; 2
  ba:	82 e4       	ldi	r24, 0x42	; 66
  bc:	0e 94 35 02 	call	0x46a	; 0x46a <LED_off>
			
			Blink=0;
  c0:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <Blink>
			while(Blink<5)                                  //2.Blink Yellow light on both
  c4:	11 c0       	rjmp	.+34     	; 0xe8 <carGreen+0x6c>
			{
				LED_toggle(PORT_A,yellow);
  c6:	61 e0       	ldi	r22, 0x01	; 1
  c8:	81 e4       	ldi	r24, 0x41	; 65
  ca:	0e 94 39 02 	call	0x472	; 0x472 <LED_toggle>
				LED_toggle(PORT_B,yellow);
  ce:	61 e0       	ldi	r22, 0x01	; 1
  d0:	82 e4       	ldi	r24, 0x42	; 66
  d2:	0e 94 39 02 	call	0x472	; 0x472 <LED_toggle>
				Start_timer(delay/5);
  d6:	82 e4       	ldi	r24, 0x42	; 66
  d8:	9f e0       	ldi	r25, 0x0F	; 15
  da:	0e 94 98 03 	call	0x730	; 0x730 <Start_timer>
				Blink++;
  de:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Blink>
  e2:	8f 5f       	subi	r24, 0xFF	; 255
  e4:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <Blink>
			Start_timer(delay);                 //NOTE: can be set to reminder or to restart counting
			LED_off(PORT_A,Green);
			LED_off(PORT_B,Red);
			
			Blink=0;
			while(Blink<5)                                  //2.Blink Yellow light on both
  e8:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Blink>
  ec:	85 30       	cpi	r24, 0x05	; 5
  ee:	58 f3       	brcs	.-42     	; 0xc6 <carGreen+0x4a>
				LED_toggle(PORT_A,yellow);
				LED_toggle(PORT_B,yellow);
				Start_timer(delay/5);
				Blink++;
			}
			LED_off(PORT_A,yellow);
  f0:	61 e0       	ldi	r22, 0x01	; 1
  f2:	81 e4       	ldi	r24, 0x41	; 65
  f4:	0e 94 35 02 	call	0x46a	; 0x46a <LED_off>
			LED_off(PORT_B,yellow);
  f8:	61 e0       	ldi	r22, 0x01	; 1
  fa:	82 e4       	ldi	r24, 0x42	; 66
  fc:	0e 94 35 02 	call	0x46a	; 0x46a <LED_off>
			
			LED_on(PORT_A,Red);                            //3.Turns on cars' "RED" and pedestrian "GREEN" for 5sec
 100:	62 e0       	ldi	r22, 0x02	; 2
 102:	81 e4       	ldi	r24, 0x41	; 65
 104:	0e 94 31 02 	call	0x462	; 0x462 <LED_on>
			LED_on(PORT_B,Green);
 108:	60 e0       	ldi	r22, 0x00	; 0
 10a:	82 e4       	ldi	r24, 0x42	; 66
 10c:	0e 94 31 02 	call	0x462	; 0x462 <LED_on>
			Start_timer(delay);
 110:	8b e4       	ldi	r24, 0x4B	; 75
 112:	9c e4       	ldi	r25, 0x4C	; 76
 114:	0e 94 98 03 	call	0x730	; 0x730 <Start_timer>
			
			LED_off(PORT_A,Red);                           //4.turn off Cars' "RED" and Blink both "Yellow" for 5sec
 118:	62 e0       	ldi	r22, 0x02	; 2
 11a:	81 e4       	ldi	r24, 0x41	; 65
 11c:	0e 94 35 02 	call	0x46a	; 0x46a <LED_off>
			Blink=0;
 120:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <Blink>
			while(Blink<5)
 124:	11 c0       	rjmp	.+34     	; 0x148 <carGreen+0xcc>
			{
				LED_toggle(PORT_A,yellow);
 126:	61 e0       	ldi	r22, 0x01	; 1
 128:	81 e4       	ldi	r24, 0x41	; 65
 12a:	0e 94 39 02 	call	0x472	; 0x472 <LED_toggle>
				LED_toggle(PORT_B,yellow);
 12e:	61 e0       	ldi	r22, 0x01	; 1
 130:	82 e4       	ldi	r24, 0x42	; 66
 132:	0e 94 39 02 	call	0x472	; 0x472 <LED_toggle>
				Start_timer(delay/5);
 136:	82 e4       	ldi	r24, 0x42	; 66
 138:	9f e0       	ldi	r25, 0x0F	; 15
 13a:	0e 94 98 03 	call	0x730	; 0x730 <Start_timer>
				Blink++;
 13e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Blink>
 142:	8f 5f       	subi	r24, 0xFF	; 255
 144:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <Blink>
			LED_on(PORT_B,Green);
			Start_timer(delay);
			
			LED_off(PORT_A,Red);                           //4.turn off Cars' "RED" and Blink both "Yellow" for 5sec
			Blink=0;
			while(Blink<5)
 148:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Blink>
 14c:	85 30       	cpi	r24, 0x05	; 5
 14e:	58 f3       	brcs	.-42     	; 0x126 <carGreen+0xaa>
				LED_toggle(PORT_B,yellow);
				Start_timer(delay/5);
				Blink++;
			}
			
			LED_off(PORT_B,yellow);                         //5.Turn off both "yellow", turn off pedestrian "Green" and Cars' "Red"
 150:	61 e0       	ldi	r22, 0x01	; 1
 152:	82 e4       	ldi	r24, 0x42	; 66
 154:	0e 94 35 02 	call	0x46a	; 0x46a <LED_off>
			LED_off(PORT_A,yellow);
 158:	61 e0       	ldi	r22, 0x01	; 1
 15a:	81 e4       	ldi	r24, 0x41	; 65
 15c:	0e 94 35 02 	call	0x46a	; 0x46a <LED_off>
			LED_off(PORT_B,Green);
 160:	60 e0       	ldi	r22, 0x00	; 0
 162:	82 e4       	ldi	r24, 0x42	; 66
 164:	0e 94 35 02 	call	0x46a	; 0x46a <LED_off>
			LED_off(PORT_A,Red);
 168:	62 e0       	ldi	r22, 0x02	; 2
 16a:	81 e4       	ldi	r24, 0x41	; 65
 16c:	0e 94 35 02 	call	0x46a	; 0x46a <LED_off>
			
			LED_on(PORT_B,Red);                             //6.Turn on pedestrian "Red" and Cars' "Green" for 5sec
 170:	62 e0       	ldi	r22, 0x02	; 2
 172:	82 e4       	ldi	r24, 0x42	; 66
 174:	0e 94 31 02 	call	0x462	; 0x462 <LED_on>
			LED_on(PORT_A,Green);
 178:	60 e0       	ldi	r22, 0x00	; 0
 17a:	81 e4       	ldi	r24, 0x41	; 65
 17c:	0e 94 31 02 	call	0x462	; 0x462 <LED_on>
			Start_timer(delay);
 180:	8b e4       	ldi	r24, 0x4B	; 75
 182:	9c e4       	ldi	r25, 0x4C	; 76
 184:	0e 94 98 03 	call	0x730	; 0x730 <Start_timer>
			
			LED_off(PORT_B,Red);                           //7. turn off pedestrian "RED"
 188:	62 e0       	ldi	r22, 0x02	; 2
 18a:	82 e4       	ldi	r24, 0x42	; 66
 18c:	0e 94 35 02 	call	0x46a	; 0x46a <LED_off>
			flag=0;
 190:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			break;
 194:	0a c0       	rjmp	.+20     	; 0x1aa <carGreen+0x12e>
		}
		Blink++;
 196:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Blink>
 19a:	8f 5f       	subi	r24, 0xFF	; 255
 19c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <Blink>
	/*                        CAR's Green-Light is ON                       */
	/************************************************************************/
	flag=0;
	LED_on(PORT_A,Green);
	Blink=0;
	while (Blink<5)                                        //checks if button is pressed 5 times
 1a0:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Blink>
 1a4:	85 30       	cpi	r24, 0x05	; 5
 1a6:	08 f4       	brcc	.+2      	; 0x1aa <carGreen+0x12e>
 1a8:	72 cf       	rjmp	.-284    	; 0x8e <carGreen+0x12>
			break;
		}
		Blink++;
	}
	
	LED_off(PORT_A,Green);
 1aa:	60 e0       	ldi	r22, 0x00	; 0
 1ac:	81 e4       	ldi	r24, 0x41	; 65
 1ae:	0e 94 35 02 	call	0x46a	; 0x46a <LED_off>
 1b2:	08 95       	ret

000001b4 <carRED>:
char carRED(void)
{
	/************************************************************************/
	/*                       CARS' RED-Light is ON                          */
	/************************************************************************/
	flag=0;
 1b4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	LED_on(PORT_A,Red);
 1b8:	62 e0       	ldi	r22, 0x02	; 2
 1ba:	81 e4       	ldi	r24, 0x41	; 65
 1bc:	0e 94 31 02 	call	0x462	; 0x462 <LED_on>
	Blink=0;
 1c0:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <Blink>
	while (Blink<5)
 1c4:	56 c0       	rjmp	.+172    	; 0x272 <carRED+0xbe>
	{
		Start_timer(delay/5);
 1c6:	82 e4       	ldi	r24, 0x42	; 66
 1c8:	9f e0       	ldi	r25, 0x0F	; 15
 1ca:	0e 94 98 03 	call	0x730	; 0x730 <Start_timer>
		if (flag==1){
 1ce:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1d2:	81 30       	cpi	r24, 0x01	; 1
 1d4:	09 f0       	breq	.+2      	; 0x1d8 <carRED+0x24>
 1d6:	48 c0       	rjmp	.+144    	; 0x268 <carRED+0xb4>
			LED_on(PORT_B,Green);
 1d8:	60 e0       	ldi	r22, 0x00	; 0
 1da:	82 e4       	ldi	r24, 0x42	; 66
 1dc:	0e 94 31 02 	call	0x462	; 0x462 <LED_on>
			Start_timer(delay);
 1e0:	8b e4       	ldi	r24, 0x4B	; 75
 1e2:	9c e4       	ldi	r25, 0x4C	; 76
 1e4:	0e 94 98 03 	call	0x730	; 0x730 <Start_timer>
			LED_off(PORT_A,Red);
 1e8:	62 e0       	ldi	r22, 0x02	; 2
 1ea:	81 e4       	ldi	r24, 0x41	; 65
 1ec:	0e 94 35 02 	call	0x46a	; 0x46a <LED_off>
			
			Blink=0;
 1f0:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <Blink>
			while(Blink<5)                                  //2.Blink Yellow light on both
 1f4:	11 c0       	rjmp	.+34     	; 0x218 <carRED+0x64>
			{
				LED_toggle(PORT_A,yellow);
 1f6:	61 e0       	ldi	r22, 0x01	; 1
 1f8:	81 e4       	ldi	r24, 0x41	; 65
 1fa:	0e 94 39 02 	call	0x472	; 0x472 <LED_toggle>
				LED_toggle(PORT_B,yellow);
 1fe:	61 e0       	ldi	r22, 0x01	; 1
 200:	82 e4       	ldi	r24, 0x42	; 66
 202:	0e 94 39 02 	call	0x472	; 0x472 <LED_toggle>
				Start_timer(delay/5);
 206:	82 e4       	ldi	r24, 0x42	; 66
 208:	9f e0       	ldi	r25, 0x0F	; 15
 20a:	0e 94 98 03 	call	0x730	; 0x730 <Start_timer>
				Blink++;
 20e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Blink>
 212:	8f 5f       	subi	r24, 0xFF	; 255
 214:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <Blink>
			LED_on(PORT_B,Green);
			Start_timer(delay);
			LED_off(PORT_A,Red);
			
			Blink=0;
			while(Blink<5)                                  //2.Blink Yellow light on both
 218:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Blink>
 21c:	85 30       	cpi	r24, 0x05	; 5
 21e:	58 f3       	brcs	.-42     	; 0x1f6 <carRED+0x42>
				LED_toggle(PORT_A,yellow);
				LED_toggle(PORT_B,yellow);
				Start_timer(delay/5);
				Blink++;
			}
			LED_off(PORT_A,yellow);
 220:	61 e0       	ldi	r22, 0x01	; 1
 222:	81 e4       	ldi	r24, 0x41	; 65
 224:	0e 94 35 02 	call	0x46a	; 0x46a <LED_off>
			LED_off(PORT_B,yellow);
 228:	61 e0       	ldi	r22, 0x01	; 1
 22a:	82 e4       	ldi	r24, 0x42	; 66
 22c:	0e 94 35 02 	call	0x46a	; 0x46a <LED_off>
			LED_off(PORT_B,Green);
 230:	60 e0       	ldi	r22, 0x00	; 0
 232:	82 e4       	ldi	r24, 0x42	; 66
 234:	0e 94 35 02 	call	0x46a	; 0x46a <LED_off>
			
			LED_on(PORT_B,Red);
 238:	62 e0       	ldi	r22, 0x02	; 2
 23a:	82 e4       	ldi	r24, 0x42	; 66
 23c:	0e 94 31 02 	call	0x462	; 0x462 <LED_on>
			LED_on(PORT_A,Green);
 240:	60 e0       	ldi	r22, 0x00	; 0
 242:	81 e4       	ldi	r24, 0x41	; 65
 244:	0e 94 31 02 	call	0x462	; 0x462 <LED_on>
			Start_timer(delay);
 248:	8b e4       	ldi	r24, 0x4B	; 75
 24a:	9c e4       	ldi	r25, 0x4C	; 76
 24c:	0e 94 98 03 	call	0x730	; 0x730 <Start_timer>
			LED_off(PORT_B,Red);
 250:	62 e0       	ldi	r22, 0x02	; 2
 252:	82 e4       	ldi	r24, 0x42	; 66
 254:	0e 94 35 02 	call	0x46a	; 0x46a <LED_off>
			LED_off(PORT_A,Green);
 258:	60 e0       	ldi	r22, 0x00	; 0
 25a:	81 e4       	ldi	r24, 0x41	; 65
 25c:	0e 94 35 02 	call	0x46a	; 0x46a <LED_off>
			
			flag=0;
 260:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			return 1;
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	08 95       	ret
		}
		Blink++;
 268:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Blink>
 26c:	8f 5f       	subi	r24, 0xFF	; 255
 26e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <Blink>
	/*                       CARS' RED-Light is ON                          */
	/************************************************************************/
	flag=0;
	LED_on(PORT_A,Red);
	Blink=0;
	while (Blink<5)
 272:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Blink>
 276:	85 30       	cpi	r24, 0x05	; 5
 278:	08 f4       	brcc	.+2      	; 0x27c <carRED+0xc8>
 27a:	a5 cf       	rjmp	.-182    	; 0x1c6 <carRED+0x12>
			flag=0;
			return 1;
		}
		Blink++;
	}
	LED_off(PORT_A,Red);
 27c:	62 e0       	ldi	r22, 0x02	; 2
 27e:	81 e4       	ldi	r24, 0x41	; 65
 280:	0e 94 35 02 	call	0x46a	; 0x46a <LED_off>
	return 0;
 284:	80 e0       	ldi	r24, 0x00	; 0
	/////////////////////////////////////////////////////////////////////////////
}
 286:	08 95       	ret

00000288 <carYellow>:
char carYellow(void)
{
	/************************************************************************/
	/*                         CAR's Yellow-Light is ON                     */
	/************************************************************************/
	flag=0;
 288:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	Blink=0;
 28c:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <Blink>
	while(Blink<5)
 290:	a2 c0       	rjmp	.+324    	; 0x3d6 <carYellow+0x14e>
	{
		LED_toggle(PORT_A,yellow);
 292:	61 e0       	ldi	r22, 0x01	; 1
 294:	81 e4       	ldi	r24, 0x41	; 65
 296:	0e 94 39 02 	call	0x472	; 0x472 <LED_toggle>
		Start_timer(delay/5);
 29a:	82 e4       	ldi	r24, 0x42	; 66
 29c:	9f e0       	ldi	r25, 0x0F	; 15
 29e:	0e 94 98 03 	call	0x730	; 0x730 <Start_timer>
		if (flag==1)
 2a2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2a6:	81 30       	cpi	r24, 0x01	; 1
 2a8:	09 f0       	breq	.+2      	; 0x2ac <carYellow+0x24>
 2aa:	90 c0       	rjmp	.+288    	; 0x3cc <carYellow+0x144>
		{                                                   //Button is pressed      ""Pedestrian-Mode""
			LED_on(PORT_B,Red);                             //1.turn on pedestrians'  ""RED-Light""
 2ac:	62 e0       	ldi	r22, 0x02	; 2
 2ae:	82 e4       	ldi	r24, 0x42	; 66
 2b0:	0e 94 31 02 	call	0x462	; 0x462 <LED_on>
			Blink=0;
 2b4:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <Blink>
			while(Blink<5)
 2b8:	0d c0       	rjmp	.+26     	; 0x2d4 <carYellow+0x4c>
			{
				LED_toggle(PORT_A,yellow);
 2ba:	61 e0       	ldi	r22, 0x01	; 1
 2bc:	81 e4       	ldi	r24, 0x41	; 65
 2be:	0e 94 39 02 	call	0x472	; 0x472 <LED_toggle>
				Start_timer(delay/5);                 //NOTE: can be set to reminder or to restart counting
 2c2:	82 e4       	ldi	r24, 0x42	; 66
 2c4:	9f e0       	ldi	r25, 0x0F	; 15
 2c6:	0e 94 98 03 	call	0x730	; 0x730 <Start_timer>
				Blink++;
 2ca:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Blink>
 2ce:	8f 5f       	subi	r24, 0xFF	; 255
 2d0:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <Blink>
		Start_timer(delay/5);
		if (flag==1)
		{                                                   //Button is pressed      ""Pedestrian-Mode""
			LED_on(PORT_B,Red);                             //1.turn on pedestrians'  ""RED-Light""
			Blink=0;
			while(Blink<5)
 2d4:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Blink>
 2d8:	85 30       	cpi	r24, 0x05	; 5
 2da:	78 f3       	brcs	.-34     	; 0x2ba <carYellow+0x32>
			{
				LED_toggle(PORT_A,yellow);
				Start_timer(delay/5);                 //NOTE: can be set to reminder or to restart counting
				Blink++;
			}
			LED_off(PORT_A,yellow);
 2dc:	61 e0       	ldi	r22, 0x01	; 1
 2de:	81 e4       	ldi	r24, 0x41	; 65
 2e0:	0e 94 35 02 	call	0x46a	; 0x46a <LED_off>
			LED_off(PORT_B,Red);
 2e4:	62 e0       	ldi	r22, 0x02	; 2
 2e6:	82 e4       	ldi	r24, 0x42	; 66
 2e8:	0e 94 35 02 	call	0x46a	; 0x46a <LED_off>
			
			Blink=0;
 2ec:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <Blink>
			while(Blink<5)                                  //2.Blink Yellow light on both
 2f0:	11 c0       	rjmp	.+34     	; 0x314 <carYellow+0x8c>
			{
				LED_toggle(PORT_A,yellow);
 2f2:	61 e0       	ldi	r22, 0x01	; 1
 2f4:	81 e4       	ldi	r24, 0x41	; 65
 2f6:	0e 94 39 02 	call	0x472	; 0x472 <LED_toggle>
				LED_toggle(PORT_B,yellow);
 2fa:	61 e0       	ldi	r22, 0x01	; 1
 2fc:	82 e4       	ldi	r24, 0x42	; 66
 2fe:	0e 94 39 02 	call	0x472	; 0x472 <LED_toggle>
				Start_timer(delay/5);
 302:	82 e4       	ldi	r24, 0x42	; 66
 304:	9f e0       	ldi	r25, 0x0F	; 15
 306:	0e 94 98 03 	call	0x730	; 0x730 <Start_timer>
				Blink++;
 30a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Blink>
 30e:	8f 5f       	subi	r24, 0xFF	; 255
 310:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <Blink>
			}
			LED_off(PORT_A,yellow);
			LED_off(PORT_B,Red);
			
			Blink=0;
			while(Blink<5)                                  //2.Blink Yellow light on both
 314:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Blink>
 318:	85 30       	cpi	r24, 0x05	; 5
 31a:	58 f3       	brcs	.-42     	; 0x2f2 <carYellow+0x6a>
				LED_toggle(PORT_A,yellow);
				LED_toggle(PORT_B,yellow);
				Start_timer(delay/5);
				Blink++;
			}
			LED_off(PORT_A,yellow);
 31c:	61 e0       	ldi	r22, 0x01	; 1
 31e:	81 e4       	ldi	r24, 0x41	; 65
 320:	0e 94 35 02 	call	0x46a	; 0x46a <LED_off>
			LED_off(PORT_B,yellow);
 324:	61 e0       	ldi	r22, 0x01	; 1
 326:	82 e4       	ldi	r24, 0x42	; 66
 328:	0e 94 35 02 	call	0x46a	; 0x46a <LED_off>
			
			LED_on(PORT_A,Red);                            //3.Turns on cars' "RED" and pedestrian "GREEN" for 5sec
 32c:	62 e0       	ldi	r22, 0x02	; 2
 32e:	81 e4       	ldi	r24, 0x41	; 65
 330:	0e 94 31 02 	call	0x462	; 0x462 <LED_on>
			LED_on(PORT_B,Green);
 334:	60 e0       	ldi	r22, 0x00	; 0
 336:	82 e4       	ldi	r24, 0x42	; 66
 338:	0e 94 31 02 	call	0x462	; 0x462 <LED_on>
			Start_timer(delay);
 33c:	8b e4       	ldi	r24, 0x4B	; 75
 33e:	9c e4       	ldi	r25, 0x4C	; 76
 340:	0e 94 98 03 	call	0x730	; 0x730 <Start_timer>
			
			LED_off(PORT_A,Red);                           //4.turn off Cars' "RED" and Blink both "Yellow" for 5sec
 344:	62 e0       	ldi	r22, 0x02	; 2
 346:	81 e4       	ldi	r24, 0x41	; 65
 348:	0e 94 35 02 	call	0x46a	; 0x46a <LED_off>
			Blink=0;
 34c:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <Blink>
			while(Blink<5)
 350:	11 c0       	rjmp	.+34     	; 0x374 <carYellow+0xec>
			{
				LED_toggle(PORT_A,yellow);
 352:	61 e0       	ldi	r22, 0x01	; 1
 354:	81 e4       	ldi	r24, 0x41	; 65
 356:	0e 94 39 02 	call	0x472	; 0x472 <LED_toggle>
				LED_toggle(PORT_B,yellow);
 35a:	61 e0       	ldi	r22, 0x01	; 1
 35c:	82 e4       	ldi	r24, 0x42	; 66
 35e:	0e 94 39 02 	call	0x472	; 0x472 <LED_toggle>
				Start_timer(delay/5);
 362:	82 e4       	ldi	r24, 0x42	; 66
 364:	9f e0       	ldi	r25, 0x0F	; 15
 366:	0e 94 98 03 	call	0x730	; 0x730 <Start_timer>
				Blink++;
 36a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Blink>
 36e:	8f 5f       	subi	r24, 0xFF	; 255
 370:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <Blink>
			LED_on(PORT_B,Green);
			Start_timer(delay);
			
			LED_off(PORT_A,Red);                           //4.turn off Cars' "RED" and Blink both "Yellow" for 5sec
			Blink=0;
			while(Blink<5)
 374:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Blink>
 378:	85 30       	cpi	r24, 0x05	; 5
 37a:	58 f3       	brcs	.-42     	; 0x352 <carYellow+0xca>
				LED_toggle(PORT_B,yellow);
				Start_timer(delay/5);
				Blink++;
			}
			
			LED_off(PORT_B,yellow);                         //5.Turn off both "yellow", turn off pedestrian "Green" and Cars' "Red"
 37c:	61 e0       	ldi	r22, 0x01	; 1
 37e:	82 e4       	ldi	r24, 0x42	; 66
 380:	0e 94 35 02 	call	0x46a	; 0x46a <LED_off>
			LED_off(PORT_A,yellow);
 384:	61 e0       	ldi	r22, 0x01	; 1
 386:	81 e4       	ldi	r24, 0x41	; 65
 388:	0e 94 35 02 	call	0x46a	; 0x46a <LED_off>
			LED_off(PORT_B,Green);
 38c:	60 e0       	ldi	r22, 0x00	; 0
 38e:	82 e4       	ldi	r24, 0x42	; 66
 390:	0e 94 35 02 	call	0x46a	; 0x46a <LED_off>
			LED_off(PORT_A,Red);
 394:	62 e0       	ldi	r22, 0x02	; 2
 396:	81 e4       	ldi	r24, 0x41	; 65
 398:	0e 94 35 02 	call	0x46a	; 0x46a <LED_off>
			
			LED_on(PORT_B,Red);                             //6.Turn on pedestrian "Red" and Cars' "Green" for 5sec
 39c:	62 e0       	ldi	r22, 0x02	; 2
 39e:	82 e4       	ldi	r24, 0x42	; 66
 3a0:	0e 94 31 02 	call	0x462	; 0x462 <LED_on>
			LED_on(PORT_A,Green);
 3a4:	60 e0       	ldi	r22, 0x00	; 0
 3a6:	81 e4       	ldi	r24, 0x41	; 65
 3a8:	0e 94 31 02 	call	0x462	; 0x462 <LED_on>
			Start_timer(delay);
 3ac:	8b e4       	ldi	r24, 0x4B	; 75
 3ae:	9c e4       	ldi	r25, 0x4C	; 76
 3b0:	0e 94 98 03 	call	0x730	; 0x730 <Start_timer>
			LED_off(PORT_A,Green);
 3b4:	60 e0       	ldi	r22, 0x00	; 0
 3b6:	81 e4       	ldi	r24, 0x41	; 65
 3b8:	0e 94 35 02 	call	0x46a	; 0x46a <LED_off>
			
			LED_off(PORT_B,Red);                           //7. turn off pedestrian "RED"
 3bc:	62 e0       	ldi	r22, 0x02	; 2
 3be:	82 e4       	ldi	r24, 0x42	; 66
 3c0:	0e 94 35 02 	call	0x46a	; 0x46a <LED_off>
			flag=0;
 3c4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			
			return 1;
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	08 95       	ret
		}
		Blink++;
 3cc:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Blink>
 3d0:	8f 5f       	subi	r24, 0xFF	; 255
 3d2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <Blink>
	/************************************************************************/
	/*                         CAR's Yellow-Light is ON                     */
	/************************************************************************/
	flag=0;
	Blink=0;
	while(Blink<5)
 3d6:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Blink>
 3da:	85 30       	cpi	r24, 0x05	; 5
 3dc:	08 f4       	brcc	.+2      	; 0x3e0 <carYellow+0x158>
 3de:	59 cf       	rjmp	.-334    	; 0x292 <carYellow+0xa>
			return 1;
		}
		Blink++;
	}
	
	LED_off(PORT_A,yellow);
 3e0:	61 e0       	ldi	r22, 0x01	; 1
 3e2:	81 e4       	ldi	r24, 0x41	; 65
 3e4:	0e 94 35 02 	call	0x46a	; 0x46a <LED_off>
	return 0;
 3e8:	80 e0       	ldi	r24, 0x00	; 0
	/////////////////////////////////////////////////////////////////////////////
 3ea:	08 95       	ret

000003ec <appStart>:
#include "application.h"
uint8_t Blink=0;
uint8_t flag=0;
void appStart(void)
{
	LED_init(PORT_A,Green);
 3ec:	60 e0       	ldi	r22, 0x00	; 0
 3ee:	81 e4       	ldi	r24, 0x41	; 65
 3f0:	0e 94 2d 02 	call	0x45a	; 0x45a <LED_init>
	LED_init(PORT_A,yellow);
 3f4:	61 e0       	ldi	r22, 0x01	; 1
 3f6:	81 e4       	ldi	r24, 0x41	; 65
 3f8:	0e 94 2d 02 	call	0x45a	; 0x45a <LED_init>
	LED_init(PORT_A,Red);
 3fc:	62 e0       	ldi	r22, 0x02	; 2
 3fe:	81 e4       	ldi	r24, 0x41	; 65
 400:	0e 94 2d 02 	call	0x45a	; 0x45a <LED_init>
	LED_init(PORT_B,Green);
 404:	60 e0       	ldi	r22, 0x00	; 0
 406:	82 e4       	ldi	r24, 0x42	; 66
 408:	0e 94 2d 02 	call	0x45a	; 0x45a <LED_init>
	LED_init(PORT_B,yellow);
 40c:	61 e0       	ldi	r22, 0x01	; 1
 40e:	82 e4       	ldi	r24, 0x42	; 66
 410:	0e 94 2d 02 	call	0x45a	; 0x45a <LED_init>
	LED_init(PORT_B,Red);
 414:	62 e0       	ldi	r22, 0x02	; 2
 416:	82 e4       	ldi	r24, 0x42	; 66
 418:	0e 94 2d 02 	call	0x45a	; 0x45a <LED_init>
	sei();
 41c:	78 94       	sei
	enable_extint(INT0);
 41e:	81 e0       	ldi	r24, 0x01	; 1
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	0e 94 63 03 	call	0x6c6	; 0x6c6 <enable_extint>
	Set_timer();
 426:	0e 94 95 03 	call	0x72a	; 0x72a <Set_timer>
	INT0_Sense(falling_Edge);
 42a:	83 e0       	ldi	r24, 0x03	; 3
 42c:	0e 94 77 03 	call	0x6ee	; 0x6ee <INT0_Sense>
	flag=0;
 430:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	while(1)
	{
		carGreen();                       //1.cars' green turn on  
 434:	0e 94 3e 00 	call	0x7c	; 0x7c <carGreen>
		
		while(carYellow())                //2.cars' yellow blink
 438:	02 c0       	rjmp	.+4      	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
		{                                 //if pedestrian mode doesn't happen loop wouldn't take effect (yellow then red) 
			carYellow();                  //if pedestrian mode does happen loop would take effect  (last step in pedestrian -> cars's green then yellow blink in normal mode)
 43a:	0e 94 44 01 	call	0x288	; 0x288 <carYellow>
	flag=0;
	while(1)
	{
		carGreen();                       //1.cars' green turn on  
		
		while(carYellow())                //2.cars' yellow blink
 43e:	0e 94 44 01 	call	0x288	; 0x288 <carYellow>
 442:	81 11       	cpse	r24, r1
 444:	fa cf       	rjmp	.-12     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 446:	02 c0       	rjmp	.+4      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
		}
		
		while (carRED())                 //3.cars' red turn on 
		{								 //if pedestrian mode doesn't happen loop wouldn't take effect (red then yellow)
				                         //if pedestrian mode does happen loop would take effect  (last step in pedestrian -> cars's green then yellow blink in normal mode)
			carYellow();
 448:	0e 94 44 01 	call	0x288	; 0x288 <carYellow>
		while(carYellow())                //2.cars' yellow blink
		{                                 //if pedestrian mode doesn't happen loop wouldn't take effect (yellow then red) 
			carYellow();                  //if pedestrian mode does happen loop would take effect  (last step in pedestrian -> cars's green then yellow blink in normal mode)
		}
		
		while (carRED())                 //3.cars' red turn on 
 44c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <carRED>
 450:	81 11       	cpse	r24, r1
 452:	fa cf       	rjmp	.-12     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
		{								 //if pedestrian mode doesn't happen loop wouldn't take effect (red then yellow)
				                         //if pedestrian mode does happen loop would take effect  (last step in pedestrian -> cars's green then yellow blink in normal mode)
			carYellow();
		}
		
		carYellow();                     //4. yellow blink again then loop repeat
 454:	0e 94 44 01 	call	0x288	; 0x288 <carYellow>
	}
 458:	ed cf       	rjmp	.-38     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>

0000045a <LED_init>:
 */ 
#include "LED.h"

void LED_init(uint8_t ledPort,uint8_t ledpin)              
{
	DIO_init(ledPort,ledpin,OUT);                             //initialize led in as an output pin -using DIO APIs-
 45a:	41 e0       	ldi	r20, 0x01	; 1
 45c:	0e 94 3c 02 	call	0x478	; 0x478 <DIO_init>
 460:	08 95       	ret

00000462 <LED_on>:
}
void LED_on(uint8_t ledPort,uint8_t ledpin)
{
	DIO_write(ledPort,ledpin,HIGH);							  //Turn on led -using DIO APIs- by writing high on its pin
 462:	41 e0       	ldi	r20, 0x01	; 1
 464:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_write>
 468:	08 95       	ret

0000046a <LED_off>:
}
void LED_off(uint8_t ledPort,uint8_t ledpin)
{
	DIO_write(ledPort,ledpin,LOW);                            //Turn off led -using DIO APIs- by writing low on its pin
 46a:	40 e0       	ldi	r20, 0x00	; 0
 46c:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_write>
 470:	08 95       	ret

00000472 <LED_toggle>:
}
void LED_toggle(uint8_t ledPort,uint8_t ledpin)
{
	DIO_toggle(ledPort,ledpin);								  //Toggle led -using DIO APIs- by toggling its pin
 472:	0e 94 2c 03 	call	0x658	; 0x658 <DIO_toggle>
 476:	08 95       	ret

00000478 <DIO_init>:

#include "DIO.h"

void DIO_init(uint8_t portnum,uint8_t pinnum,uint8_t direction)                           //initialize specific pin as INPUT or OUTPUT pin 
{
	switch (portnum)                                               //1.choose PORT
 478:	82 34       	cpi	r24, 0x42	; 66
 47a:	29 f1       	breq	.+74     	; 0x4c6 <DIO_init+0x4e>
 47c:	18 f4       	brcc	.+6      	; 0x484 <DIO_init+0xc>
 47e:	81 34       	cpi	r24, 0x41	; 65
 480:	39 f0       	breq	.+14     	; 0x490 <DIO_init+0x18>
 482:	08 95       	ret
 484:	83 34       	cpi	r24, 0x43	; 67
 486:	d1 f1       	breq	.+116    	; 0x4fc <DIO_init+0x84>
 488:	84 34       	cpi	r24, 0x44	; 68
 48a:	09 f4       	brne	.+2      	; 0x48e <DIO_init+0x16>
 48c:	52 c0       	rjmp	.+164    	; 0x532 <DIO_init+0xba>
 48e:	08 95       	ret
	{
		case PORT_A:                  
		if (direction==OUT)                                        //2. choose MODE
 490:	41 30       	cpi	r20, 0x01	; 1
 492:	59 f4       	brne	.+22     	; 0x4aa <DIO_init+0x32>
		{
			DDRA |= (1<<pinnum);       //3.set the bit which correspond to that pin in the digital direction register 
 494:	2a b3       	in	r18, 0x1a	; 26
 496:	81 e0       	ldi	r24, 0x01	; 1
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	02 c0       	rjmp	.+4      	; 0x4a0 <DIO_init+0x28>
 49c:	88 0f       	add	r24, r24
 49e:	99 1f       	adc	r25, r25
 4a0:	6a 95       	dec	r22
 4a2:	e2 f7       	brpl	.-8      	; 0x49c <DIO_init+0x24>
 4a4:	82 2b       	or	r24, r18
 4a6:	8a bb       	out	0x1a, r24	; 26
 4a8:	08 95       	ret
		}
		else if(direction==IN)
 4aa:	41 11       	cpse	r20, r1
 4ac:	5c c0       	rjmp	.+184    	; 0x566 <DIO_init+0xee>
		{
			DDRA &= ~(1<<pinnum);      //3.clear the bit which correspond to that pin in the digital direction register 
 4ae:	2a b3       	in	r18, 0x1a	; 26
 4b0:	81 e0       	ldi	r24, 0x01	; 1
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	02 c0       	rjmp	.+4      	; 0x4ba <DIO_init+0x42>
 4b6:	88 0f       	add	r24, r24
 4b8:	99 1f       	adc	r25, r25
 4ba:	6a 95       	dec	r22
 4bc:	e2 f7       	brpl	.-8      	; 0x4b6 <DIO_init+0x3e>
 4be:	80 95       	com	r24
 4c0:	82 23       	and	r24, r18
 4c2:	8a bb       	out	0x1a, r24	; 26
 4c4:	08 95       	ret
			//ERROR handling
		}	   
		break;
	
		case PORT_B:                                               //same as above
		if (direction==OUT)
 4c6:	41 30       	cpi	r20, 0x01	; 1
 4c8:	59 f4       	brne	.+22     	; 0x4e0 <DIO_init+0x68>
		{
			DDRB |= (1<<pinnum);
 4ca:	27 b3       	in	r18, 0x17	; 23
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	02 c0       	rjmp	.+4      	; 0x4d6 <DIO_init+0x5e>
 4d2:	88 0f       	add	r24, r24
 4d4:	99 1f       	adc	r25, r25
 4d6:	6a 95       	dec	r22
 4d8:	e2 f7       	brpl	.-8      	; 0x4d2 <DIO_init+0x5a>
 4da:	82 2b       	or	r24, r18
 4dc:	87 bb       	out	0x17, r24	; 23
 4de:	08 95       	ret
		}
		else if(direction==IN)
 4e0:	41 11       	cpse	r20, r1
 4e2:	41 c0       	rjmp	.+130    	; 0x566 <DIO_init+0xee>
		{
			DDRB &= ~(1<<pinnum);
 4e4:	27 b3       	in	r18, 0x17	; 23
 4e6:	81 e0       	ldi	r24, 0x01	; 1
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <DIO_init+0x78>
 4ec:	88 0f       	add	r24, r24
 4ee:	99 1f       	adc	r25, r25
 4f0:	6a 95       	dec	r22
 4f2:	e2 f7       	brpl	.-8      	; 0x4ec <DIO_init+0x74>
 4f4:	80 95       	com	r24
 4f6:	82 23       	and	r24, r18
 4f8:	87 bb       	out	0x17, r24	; 23
 4fa:	08 95       	ret
			//ERROR handling
		}
		break;

		case PORT_C:                                               //same as above
		if (direction==OUT)
 4fc:	41 30       	cpi	r20, 0x01	; 1
 4fe:	59 f4       	brne	.+22     	; 0x516 <DIO_init+0x9e>
		{
			DDRC |= (1<<pinnum);
 500:	24 b3       	in	r18, 0x14	; 20
 502:	81 e0       	ldi	r24, 0x01	; 1
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	02 c0       	rjmp	.+4      	; 0x50c <DIO_init+0x94>
 508:	88 0f       	add	r24, r24
 50a:	99 1f       	adc	r25, r25
 50c:	6a 95       	dec	r22
 50e:	e2 f7       	brpl	.-8      	; 0x508 <DIO_init+0x90>
 510:	82 2b       	or	r24, r18
 512:	84 bb       	out	0x14, r24	; 20
 514:	08 95       	ret
		}
		else if(direction==IN)
 516:	41 11       	cpse	r20, r1
 518:	26 c0       	rjmp	.+76     	; 0x566 <DIO_init+0xee>
		{
			DDRC &= ~(1<<pinnum);
 51a:	24 b3       	in	r18, 0x14	; 20
 51c:	81 e0       	ldi	r24, 0x01	; 1
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	02 c0       	rjmp	.+4      	; 0x526 <DIO_init+0xae>
 522:	88 0f       	add	r24, r24
 524:	99 1f       	adc	r25, r25
 526:	6a 95       	dec	r22
 528:	e2 f7       	brpl	.-8      	; 0x522 <DIO_init+0xaa>
 52a:	80 95       	com	r24
 52c:	82 23       	and	r24, r18
 52e:	84 bb       	out	0x14, r24	; 20
 530:	08 95       	ret
			//ERROR handling
		}
		break;
	
		case PORT_D:                                              //same as above
		if (direction==OUT)
 532:	41 30       	cpi	r20, 0x01	; 1
 534:	59 f4       	brne	.+22     	; 0x54c <DIO_init+0xd4>
		{
			DDRD |= (1<<pinnum);
 536:	21 b3       	in	r18, 0x11	; 17
 538:	81 e0       	ldi	r24, 0x01	; 1
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	02 c0       	rjmp	.+4      	; 0x542 <DIO_init+0xca>
 53e:	88 0f       	add	r24, r24
 540:	99 1f       	adc	r25, r25
 542:	6a 95       	dec	r22
 544:	e2 f7       	brpl	.-8      	; 0x53e <DIO_init+0xc6>
 546:	82 2b       	or	r24, r18
 548:	81 bb       	out	0x11, r24	; 17
 54a:	08 95       	ret
		}
		else if(direction==IN)
 54c:	41 11       	cpse	r20, r1
 54e:	0b c0       	rjmp	.+22     	; 0x566 <DIO_init+0xee>
		{
			DDRD &= ~(1<<pinnum);
 550:	21 b3       	in	r18, 0x11	; 17
 552:	81 e0       	ldi	r24, 0x01	; 1
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	02 c0       	rjmp	.+4      	; 0x55c <DIO_init+0xe4>
 558:	88 0f       	add	r24, r24
 55a:	99 1f       	adc	r25, r25
 55c:	6a 95       	dec	r22
 55e:	e2 f7       	brpl	.-8      	; 0x558 <DIO_init+0xe0>
 560:	80 95       	com	r24
 562:	82 23       	and	r24, r18
 564:	81 bb       	out	0x11, r24	; 17
 566:	08 95       	ret

00000568 <DIO_write>:
	}
}

void DIO_write(uint8_t portnum,uint8_t pinnum,uint8_t value)                              //write high/low on specific pin
{
	switch (portnum)                                  //1.choose PORT
 568:	82 34       	cpi	r24, 0x42	; 66
 56a:	29 f1       	breq	.+74     	; 0x5b6 <DIO_write+0x4e>
 56c:	18 f4       	brcc	.+6      	; 0x574 <DIO_write+0xc>
 56e:	81 34       	cpi	r24, 0x41	; 65
 570:	39 f0       	breq	.+14     	; 0x580 <DIO_write+0x18>
 572:	08 95       	ret
 574:	83 34       	cpi	r24, 0x43	; 67
 576:	d1 f1       	breq	.+116    	; 0x5ec <DIO_write+0x84>
 578:	84 34       	cpi	r24, 0x44	; 68
 57a:	09 f4       	brne	.+2      	; 0x57e <DIO_write+0x16>
 57c:	52 c0       	rjmp	.+164    	; 0x622 <DIO_write+0xba>
 57e:	08 95       	ret
	{
		case PORT_A:
		if (value==HIGH)                              //2.high/low flow
 580:	41 30       	cpi	r20, 0x01	; 1
 582:	59 f4       	brne	.+22     	; 0x59a <DIO_write+0x32>
		{
			PORTA |= (1<<pinnum);         //3.set bit what would indicate high output acc. to datasheet
 584:	2b b3       	in	r18, 0x1b	; 27
 586:	81 e0       	ldi	r24, 0x01	; 1
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	02 c0       	rjmp	.+4      	; 0x590 <DIO_write+0x28>
 58c:	88 0f       	add	r24, r24
 58e:	99 1f       	adc	r25, r25
 590:	6a 95       	dec	r22
 592:	e2 f7       	brpl	.-8      	; 0x58c <DIO_write+0x24>
 594:	82 2b       	or	r24, r18
 596:	8b bb       	out	0x1b, r24	; 27
 598:	08 95       	ret
		}
		else if(value==LOW)
 59a:	41 11       	cpse	r20, r1
 59c:	5c c0       	rjmp	.+184    	; 0x656 <DIO_write+0xee>
		{
			PORTA &= ~(1<<pinnum);        //3.clear bit what would indicate LOW output acc. to datasheet
 59e:	2b b3       	in	r18, 0x1b	; 27
 5a0:	81 e0       	ldi	r24, 0x01	; 1
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	02 c0       	rjmp	.+4      	; 0x5aa <DIO_write+0x42>
 5a6:	88 0f       	add	r24, r24
 5a8:	99 1f       	adc	r25, r25
 5aa:	6a 95       	dec	r22
 5ac:	e2 f7       	brpl	.-8      	; 0x5a6 <DIO_write+0x3e>
 5ae:	80 95       	com	r24
 5b0:	82 23       	and	r24, r18
 5b2:	8b bb       	out	0x1b, r24	; 27
 5b4:	08 95       	ret
		}
		break;
		
		
		case PORT_B:                      //same as above
		if (value==HIGH)
 5b6:	41 30       	cpi	r20, 0x01	; 1
 5b8:	59 f4       	brne	.+22     	; 0x5d0 <DIO_write+0x68>
		{
			PORTB |= (1<<pinnum);
 5ba:	28 b3       	in	r18, 0x18	; 24
 5bc:	81 e0       	ldi	r24, 0x01	; 1
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	02 c0       	rjmp	.+4      	; 0x5c6 <DIO_write+0x5e>
 5c2:	88 0f       	add	r24, r24
 5c4:	99 1f       	adc	r25, r25
 5c6:	6a 95       	dec	r22
 5c8:	e2 f7       	brpl	.-8      	; 0x5c2 <DIO_write+0x5a>
 5ca:	82 2b       	or	r24, r18
 5cc:	88 bb       	out	0x18, r24	; 24
 5ce:	08 95       	ret
		}
		else if(value==LOW)
 5d0:	41 11       	cpse	r20, r1
 5d2:	41 c0       	rjmp	.+130    	; 0x656 <DIO_write+0xee>
		{
			PORTB &= ~(1<<pinnum);
 5d4:	28 b3       	in	r18, 0x18	; 24
 5d6:	81 e0       	ldi	r24, 0x01	; 1
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	02 c0       	rjmp	.+4      	; 0x5e0 <DIO_write+0x78>
 5dc:	88 0f       	add	r24, r24
 5de:	99 1f       	adc	r25, r25
 5e0:	6a 95       	dec	r22
 5e2:	e2 f7       	brpl	.-8      	; 0x5dc <DIO_write+0x74>
 5e4:	80 95       	com	r24
 5e6:	82 23       	and	r24, r18
 5e8:	88 bb       	out	0x18, r24	; 24
 5ea:	08 95       	ret
		}
		break;
		
		
		case PORT_C:                      //same as above
		if (value==HIGH)
 5ec:	41 30       	cpi	r20, 0x01	; 1
 5ee:	59 f4       	brne	.+22     	; 0x606 <DIO_write+0x9e>
		{
			PORTC |= (1<<pinnum);
 5f0:	25 b3       	in	r18, 0x15	; 21
 5f2:	81 e0       	ldi	r24, 0x01	; 1
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	02 c0       	rjmp	.+4      	; 0x5fc <DIO_write+0x94>
 5f8:	88 0f       	add	r24, r24
 5fa:	99 1f       	adc	r25, r25
 5fc:	6a 95       	dec	r22
 5fe:	e2 f7       	brpl	.-8      	; 0x5f8 <DIO_write+0x90>
 600:	82 2b       	or	r24, r18
 602:	85 bb       	out	0x15, r24	; 21
 604:	08 95       	ret
		}
		else if(value==LOW)
 606:	41 11       	cpse	r20, r1
 608:	26 c0       	rjmp	.+76     	; 0x656 <DIO_write+0xee>
		{
			PORTC &= ~(1<<pinnum);
 60a:	25 b3       	in	r18, 0x15	; 21
 60c:	81 e0       	ldi	r24, 0x01	; 1
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	02 c0       	rjmp	.+4      	; 0x616 <DIO_write+0xae>
 612:	88 0f       	add	r24, r24
 614:	99 1f       	adc	r25, r25
 616:	6a 95       	dec	r22
 618:	e2 f7       	brpl	.-8      	; 0x612 <DIO_write+0xaa>
 61a:	80 95       	com	r24
 61c:	82 23       	and	r24, r18
 61e:	85 bb       	out	0x15, r24	; 21
 620:	08 95       	ret
			//ERROR handling
		}
		break;
		
		case PORT_D:                      //same as above
		if (value==HIGH)
 622:	41 30       	cpi	r20, 0x01	; 1
 624:	59 f4       	brne	.+22     	; 0x63c <DIO_write+0xd4>
		{
			PORTD |= (1<<pinnum);
 626:	22 b3       	in	r18, 0x12	; 18
 628:	81 e0       	ldi	r24, 0x01	; 1
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	02 c0       	rjmp	.+4      	; 0x632 <DIO_write+0xca>
 62e:	88 0f       	add	r24, r24
 630:	99 1f       	adc	r25, r25
 632:	6a 95       	dec	r22
 634:	e2 f7       	brpl	.-8      	; 0x62e <DIO_write+0xc6>
 636:	82 2b       	or	r24, r18
 638:	82 bb       	out	0x12, r24	; 18
 63a:	08 95       	ret
		}
		else if(value==LOW)
 63c:	41 11       	cpse	r20, r1
 63e:	0b c0       	rjmp	.+22     	; 0x656 <DIO_write+0xee>
		{
			PORTD &= ~(1<<pinnum);
 640:	22 b3       	in	r18, 0x12	; 18
 642:	81 e0       	ldi	r24, 0x01	; 1
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	02 c0       	rjmp	.+4      	; 0x64c <DIO_write+0xe4>
 648:	88 0f       	add	r24, r24
 64a:	99 1f       	adc	r25, r25
 64c:	6a 95       	dec	r22
 64e:	e2 f7       	brpl	.-8      	; 0x648 <DIO_write+0xe0>
 650:	80 95       	com	r24
 652:	82 23       	and	r24, r18
 654:	82 bb       	out	0x12, r24	; 18
 656:	08 95       	ret

00000658 <DIO_toggle>:
	}
}

void DIO_toggle(uint8_t portnum,uint8_t pinnum)                                           //Toggle specific pin
{                                          
	switch (portnum)                      //1.choose PORT
 658:	82 34       	cpi	r24, 0x42	; 66
 65a:	a1 f0       	breq	.+40     	; 0x684 <DIO_toggle+0x2c>
 65c:	18 f4       	brcc	.+6      	; 0x664 <DIO_toggle+0xc>
 65e:	81 34       	cpi	r24, 0x41	; 65
 660:	31 f0       	breq	.+12     	; 0x66e <DIO_toggle+0x16>
 662:	08 95       	ret
 664:	83 34       	cpi	r24, 0x43	; 67
 666:	c9 f0       	breq	.+50     	; 0x69a <DIO_toggle+0x42>
 668:	84 34       	cpi	r24, 0x44	; 68
 66a:	11 f1       	breq	.+68     	; 0x6b0 <DIO_toggle+0x58>
 66c:	08 95       	ret
	{
		case PORT_A:
			PORTA ^= (1<<pinnum);         //2.Toggle bit in corresponding register to that pin 
 66e:	2b b3       	in	r18, 0x1b	; 27
 670:	81 e0       	ldi	r24, 0x01	; 1
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	02 c0       	rjmp	.+4      	; 0x67a <DIO_toggle+0x22>
 676:	88 0f       	add	r24, r24
 678:	99 1f       	adc	r25, r25
 67a:	6a 95       	dec	r22
 67c:	e2 f7       	brpl	.-8      	; 0x676 <DIO_toggle+0x1e>
 67e:	82 27       	eor	r24, r18
 680:	8b bb       	out	0x1b, r24	; 27
		break;
 682:	08 95       	ret
		case PORT_B:
			PORTB ^= (1<<pinnum);
 684:	28 b3       	in	r18, 0x18	; 24
 686:	81 e0       	ldi	r24, 0x01	; 1
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	02 c0       	rjmp	.+4      	; 0x690 <DIO_toggle+0x38>
 68c:	88 0f       	add	r24, r24
 68e:	99 1f       	adc	r25, r25
 690:	6a 95       	dec	r22
 692:	e2 f7       	brpl	.-8      	; 0x68c <DIO_toggle+0x34>
 694:	82 27       	eor	r24, r18
 696:	88 bb       	out	0x18, r24	; 24
		break;
 698:	08 95       	ret
		case PORT_C:
			PORTC ^= (1<<pinnum);
 69a:	25 b3       	in	r18, 0x15	; 21
 69c:	81 e0       	ldi	r24, 0x01	; 1
 69e:	90 e0       	ldi	r25, 0x00	; 0
 6a0:	02 c0       	rjmp	.+4      	; 0x6a6 <DIO_toggle+0x4e>
 6a2:	88 0f       	add	r24, r24
 6a4:	99 1f       	adc	r25, r25
 6a6:	6a 95       	dec	r22
 6a8:	e2 f7       	brpl	.-8      	; 0x6a2 <DIO_toggle+0x4a>
 6aa:	82 27       	eor	r24, r18
 6ac:	85 bb       	out	0x15, r24	; 21
		break;
 6ae:	08 95       	ret
		case PORT_D:
		PORTD ^= (1<<pinnum);
 6b0:	22 b3       	in	r18, 0x12	; 18
 6b2:	81 e0       	ldi	r24, 0x01	; 1
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	02 c0       	rjmp	.+4      	; 0x6bc <DIO_toggle+0x64>
 6b8:	88 0f       	add	r24, r24
 6ba:	99 1f       	adc	r25, r25
 6bc:	6a 95       	dec	r22
 6be:	e2 f7       	brpl	.-8      	; 0x6b8 <DIO_toggle+0x60>
 6c0:	82 27       	eor	r24, r18
 6c2:	82 bb       	out	0x12, r24	; 18
 6c4:	08 95       	ret

000006c6 <enable_extint>:
#include "interrupts.h"


void enable_extint(int INT_n){

	switch(INT_n){
 6c6:	82 30       	cpi	r24, 0x02	; 2
 6c8:	91 05       	cpc	r25, r1
 6ca:	49 f0       	breq	.+18     	; 0x6de <enable_extint+0x18>
 6cc:	83 30       	cpi	r24, 0x03	; 3
 6ce:	91 05       	cpc	r25, r1
 6d0:	51 f0       	breq	.+20     	; 0x6e6 <enable_extint+0x20>
 6d2:	01 97       	sbiw	r24, 0x01	; 1
 6d4:	59 f4       	brne	.+22     	; 0x6ec <enable_extint+0x26>
		case INT0:
		GICR|=(1<<6);
 6d6:	8b b7       	in	r24, 0x3b	; 59
 6d8:	80 64       	ori	r24, 0x40	; 64
 6da:	8b bf       	out	0x3b, r24	; 59
		break;
 6dc:	08 95       	ret
		
		case INT1:
		GICR|=(1<<7);
 6de:	8b b7       	in	r24, 0x3b	; 59
 6e0:	80 68       	ori	r24, 0x80	; 128
 6e2:	8b bf       	out	0x3b, r24	; 59
		break;
 6e4:	08 95       	ret
		
		case INT2:
		GICR|=(1<<5);
 6e6:	8b b7       	in	r24, 0x3b	; 59
 6e8:	80 62       	ori	r24, 0x20	; 32
 6ea:	8b bf       	out	0x3b, r24	; 59
 6ec:	08 95       	ret

000006ee <INT0_Sense>:
	}	
}

void INT0_Sense(Sense sense)
{
	switch(sense){
 6ee:	81 30       	cpi	r24, 0x01	; 1
 6f0:	51 f0       	breq	.+20     	; 0x706 <INT0_Sense+0x18>
 6f2:	28 f0       	brcs	.+10     	; 0x6fe <INT0_Sense+0x10>
 6f4:	82 30       	cpi	r24, 0x02	; 2
 6f6:	a9 f0       	breq	.+42     	; 0x722 <INT0_Sense+0x34>
 6f8:	83 30       	cpi	r24, 0x03	; 3
 6fa:	61 f0       	breq	.+24     	; 0x714 <INT0_Sense+0x26>
 6fc:	08 95       	ret
		case LOWlvl:
		MCUCR &=~(3<<0);
 6fe:	85 b7       	in	r24, 0x35	; 53
 700:	8c 7f       	andi	r24, 0xFC	; 252
 702:	85 bf       	out	0x35, r24	; 53
		break;
 704:	08 95       	ret
		
		case logical_change:
		MCUCR |=(1<<0);
 706:	85 b7       	in	r24, 0x35	; 53
 708:	81 60       	ori	r24, 0x01	; 1
 70a:	85 bf       	out	0x35, r24	; 53
		MCUCR &=~(1<<1);
 70c:	85 b7       	in	r24, 0x35	; 53
 70e:	8d 7f       	andi	r24, 0xFD	; 253
 710:	85 bf       	out	0x35, r24	; 53
		break;
 712:	08 95       	ret
		
		case falling_Edge:
		MCUCR |=(1<<1);
 714:	85 b7       	in	r24, 0x35	; 53
 716:	82 60       	ori	r24, 0x02	; 2
 718:	85 bf       	out	0x35, r24	; 53
		MCUCR &=~(1<<0);
 71a:	85 b7       	in	r24, 0x35	; 53
 71c:	8e 7f       	andi	r24, 0xFE	; 254
 71e:	85 bf       	out	0x35, r24	; 53
		break;
 720:	08 95       	ret
		
		case rising_Edge:
		MCUCR |=(3<<0);
 722:	85 b7       	in	r24, 0x35	; 53
 724:	83 60       	ori	r24, 0x03	; 3
 726:	85 bf       	out	0x35, r24	; 53
 728:	08 95       	ret

0000072a <Set_timer>:
 */ 
#include "timer.h"


void Set_timer(){
	  TCCR0=0x00;                           // normal mode
 72a:	13 be       	out	0x33, r1	; 51
	  TCNT0=0x00;                           // set timer initial value
 72c:	12 be       	out	0x32, r1	; 50
 72e:	08 95       	ret

00000730 <Start_timer>:
}

void Start_timer(uint16_t overFlowsNumber){
 730:	ac 01       	movw	r20, r24
	uint16_t overFlowCounter=0;
	TCCR0 |=(1<<0);                         //Timer start
 732:	83 b7       	in	r24, 0x33	; 51
 734:	81 60       	ori	r24, 0x01	; 1
 736:	83 bf       	out	0x33, r24	; 51
	  TCCR0=0x00;                           // normal mode
	  TCNT0=0x00;                           // set timer initial value
}

void Start_timer(uint16_t overFlowsNumber){
	uint16_t overFlowCounter=0;
 738:	20 e0       	ldi	r18, 0x00	; 0
 73a:	30 e0       	ldi	r19, 0x00	; 0
	TCCR0 |=(1<<0);                         //Timer start
	while(overFlowCounter<overFlowsNumber){
 73c:	08 c0       	rjmp	.+16     	; 0x74e <Start_timer+0x1e>
		while((TIFR & (1<<0))==0);          // while there is no over flow
 73e:	08 b6       	in	r0, 0x38	; 56
 740:	00 fe       	sbrs	r0, 0
 742:	fd cf       	rjmp	.-6      	; 0x73e <Start_timer+0xe>
		TIFR |=(1<<0);                      //clear flag
 744:	98 b7       	in	r25, 0x38	; 56
 746:	91 60       	ori	r25, 0x01	; 1
 748:	98 bf       	out	0x38, r25	; 56
		overFlowCounter++;
 74a:	2f 5f       	subi	r18, 0xFF	; 255
 74c:	3f 4f       	sbci	r19, 0xFF	; 255
}

void Start_timer(uint16_t overFlowsNumber){
	uint16_t overFlowCounter=0;
	TCCR0 |=(1<<0);                         //Timer start
	while(overFlowCounter<overFlowsNumber){
 74e:	24 17       	cp	r18, r20
 750:	35 07       	cpc	r19, r21
 752:	a8 f3       	brcs	.-22     	; 0x73e <Start_timer+0xe>
		while((TIFR & (1<<0))==0);          // while there is no over flow
		TIFR |=(1<<0);                      //clear flag
		overFlowCounter++;
	}
}
 754:	08 95       	ret

00000756 <main>:
#include "test_module.h"

int main(void)
{
  
  appStart();
 756:	0e 94 f6 01 	call	0x3ec	; 0x3ec <appStart>
  //enable_extint(INT2);
  //INT0_Sense(rising_Edge);
  //INT1_Sense(logical_change);
  //INT2_Sense(falling_Edge);
 // while(1) test();
}
 75a:	80 e0       	ldi	r24, 0x00	; 0
 75c:	90 e0       	ldi	r25, 0x00	; 0
 75e:	08 95       	ret

00000760 <__vector_1>:

ISR(INT0vect)
{
 760:	1f 92       	push	r1
 762:	0f 92       	push	r0
 764:	0f b6       	in	r0, 0x3f	; 63
 766:	0f 92       	push	r0
 768:	11 24       	eor	r1, r1
 76a:	8f 93       	push	r24
	flag|=(1<<0);
 76c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 770:	81 60       	ori	r24, 0x01	; 1
 772:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
}
 776:	8f 91       	pop	r24
 778:	0f 90       	pop	r0
 77a:	0f be       	out	0x3f, r0	; 63
 77c:	0f 90       	pop	r0
 77e:	1f 90       	pop	r1
 780:	18 95       	reti

00000782 <_exit>:
 782:	f8 94       	cli

00000784 <__stop_program>:
 784:	ff cf       	rjmp	.-2      	; 0x784 <__stop_program>
